---
title: 'Análisis espaciales y multivariantes con R (AEMeR) aplicados a estudios de biodiversidad'
subtitle: 'Ejercicios de gráficos en R'
author: 'Diego Nieto Lugilde'
format: html
toc: true
toc-depth: 2
lightbox: auto
editor: source
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE,
                      eval = FALSE)
```

::: callout-note
Los ejercicios tendréis que entregarlos para la evaluación del curso. Para ello, crea un script de R con RStudio. Ponle el nombre `ejercicios_t2.R`. Dicho script deberá estar organizado con comentarios en castellano (poniendo una almohadilla `#` delante) y justo detrás el código necesario para realizar el ejercicio (ver ejemplo debajo). Además, si el ejercicio pide reflexionar sobre el resultado use los comentarios (con la `#`) para indicar sus reflexiones debajo del código. Una vez los tengáis completos deberéis subirlos en la actividad correspondiente de Moodle.

```{r}
#| echo: true
#| eval: false

# Parte 1
# Ejercicio 1
seq(1, 40, by = 2)

# Ejercicio 2
seq(1, 40, by = -2)
# Este código da error porque especifiqué algo mal :)

```
:::


# Parte 1: Gráficas y figuras

**1. Dibuja un histograma del vector `a` que creaste en los Ejercicios de la Clase anterior.**

::: {.callout-tip collapse="true"}
## Pista

La función `hist (x)` dibuja un histograma de los valores almacenados en `x`. Se puede personalizar de varias maneras, incluido el uso de puntos de cambio para cambiar la definición de la anchura de las barras. Explora las posibilidades con `?hist`
:::

**2. Cambia el color de las barras del histograma con la opción `col` y cambia el color de los bordes con la opción de `border`.**

**3. Usa `abline()` para representar el valor de la media de la distribución como una línea vertical punteada.**

::: {.callout-tip collapse="true"}
## Pista

La función `abline (a, b)` dibuja una línea en la gráfica ya existente con la pendiente especificada `b` e intercepto `a`. También puede dibujar líneas horizontales o verticales. Para ello, en lugar de especificar los argumentos `a` y `b`, deberás especificar un valor concreto usando `h = valor` o `v = valor`, dependiendo si quieres dibujar una línea horizontal o vertical.
:::

**4. Crea dos variables correlacionadas `x` e `y`, usando `x <- rnorm (200)` e `y <- x + rnorm (200)` y dibuja `x` vs. `y` y juega con los parámetros de trazado.** 

::: {.callout-tip collapse="true"}
## Pista

La función `plot (x, y,...)` dibuja los datos de `x` contra los datos de `y`. Es personalizable utilizando una amplia gama de opciones. Puedes consultar todas las opciones con `?plot`
:::

**5. Usa la función `abline()` para incluir una recta de regresión entre las dos variables.**

::: {.callout-tip collapse="true"}
## Pista

Recuerda, además, que la función `abline (a, b)` dibuja una línea en la gráfica ya existente con la pendiente especificada `b` e intercepto `a`. Para calcular los valores de la pendiente, puedes usar la función `lm(x ~ y)`, que genera un modelo lineal entre las dos variables.
:::

**6. Genera un nuevo conjunto de datos `w` correlacionado con `x`, usando `w <- 0.5 * x * rnorm(200)`. Añade este nuevo conjunto de datos al gráfico anterior pero cambiando el color para que se distingan bien los datos de `y` y `w`. Además, añade otra recta de regresión entre `w` y `x`.**

::: {.callout-tip collapse="true"}
## Pista

Hay varias funciones (`points(x, y)`, `segments(x0, y0, x1, y1)`, `arrows(x0, y0, x1, y1)`, `polygons(x, y)`), que en lugar de generar gráficos nuevos, dibuja puntos, segmentos de línea, flechas o polígonos en el último gráfico que se haya generado.
:::

**7. Guarda el gráfico resultante del ejercicio 6 en un archivo de tipo `.png`.**