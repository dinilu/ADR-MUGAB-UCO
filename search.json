[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Análisis de datos en R",
    "section": "",
    "text": "Esta es la web con los materiales del curso:\n\nClase 1: Introducción a R. Presentación - Ejercicios - Homeworks - Datos\n\nEsta página web se construyó usando el sistema Quarto de RStudio. Para saber más sobre páginas web creadas con Quarto visita https://quarto.org/docs/websites."
  },
  {
    "objectID": "ADR-1_Intro.html#la-estructura-de-r",
    "href": "ADR-1_Intro.html#la-estructura-de-r",
    "title": "Introducción a R",
    "section": "La estructura de R",
    "text": "La estructura de R\n\nFunciones: ¿qué deseas hacer?\nObjetos: ¿con qué o sobre qué quieres hacerlo?\n\n\nsqrt(16)\n\n[1] 4\n\n\n\n\n\n\n\n\nNote\n\n\nAquí, 16 es el objeto sobre el que aplicamos la función sqrt() (raíz cuadrada)"
  },
  {
    "objectID": "ADR-1_Intro.html#la-estructura-de-r-1",
    "href": "ADR-1_Intro.html#la-estructura-de-r-1",
    "title": "Introducción a R",
    "section": "La estructura de R",
    "text": "La estructura de R\n\n\n\n\n\n\n\n\n\n\nObjeto\n\nObjeto\n\n\n\nFunción\n\nFunción\n\n\n\nObjeto-&gt;Función\n\n\n\n\n\nNuevo objeto\n\nNuevo objeto\n\n\n\nFunción-&gt;Nuevo objeto"
  },
  {
    "objectID": "ADR-1_Intro.html#llamar-a-una-función",
    "href": "ADR-1_Intro.html#llamar-a-una-función",
    "title": "Introducción a R",
    "section": "Llamar a una función",
    "text": "Llamar a una función\n\nCall: Una función con un conjunto particular de objetos\n\nfunción( argumento 1 )\n\n\n\nsqrt(16)\n\n[1] 4\n\n\n\n\n\n\n\n\nNote\n\n\nEl resultado de la función se imprime directamente en pantalla"
  },
  {
    "objectID": "ADR-1_Intro.html#asignación-de-valores-a-objetos",
    "href": "ADR-1_Intro.html#asignación-de-valores-a-objetos",
    "title": "Introducción a R",
    "section": "Asignación de valores a objetos",
    "text": "Asignación de valores a objetos\n\nAssign: Una función especial para crear/modificar un objeto\n\nValor específico\nEl resultado de una llamada a una función\n\n\n\nx &lt;- 2\n\n\n\n\n\n\n\nNote\n\n\nFijaros que el resultado no se imprime en pantalla como antes\n\n\n\n\nx\n\n[1] 2"
  },
  {
    "objectID": "ADR-1_Intro.html#múltiples-asignaciones-para-crear-objetos",
    "href": "ADR-1_Intro.html#múltiples-asignaciones-para-crear-objetos",
    "title": "Introducción a R",
    "section": "Múltiples asignaciones para crear objetos",
    "text": "Múltiples asignaciones para crear objetos\n\na = 10\n\na &lt;- 10\n\n10 -&gt; a\n\n\nEstas tres líneas hacen lo mismo"
  },
  {
    "objectID": "ADR-1_Intro.html#números-de-cualquier-tipo",
    "href": "ADR-1_Intro.html#números-de-cualquier-tipo",
    "title": "Introducción a R",
    "section": "Números de cualquier tipo",
    "text": "Números de cualquier tipo\n\n0, 0.2, Inf\n\n\nnumeric_object &lt;- 0.5"
  },
  {
    "objectID": "ADR-1_Intro.html#caracteres-texto",
    "href": "ADR-1_Intro.html#caracteres-texto",
    "title": "Introducción a R",
    "section": "Caracteres (texto)",
    "text": "Caracteres (texto)\n\nTexto libre\n\n\ncharacter_object &lt;- \"Bromus diandrus\"\n\n\n\n\n\n\n\nWarning\n\n\nLas cadenas de texto se ponen entre comillas para poder usar espacios y para distinguirlos de los objetos"
  },
  {
    "objectID": "ADR-1_Intro.html#valores-lógicos",
    "href": "ADR-1_Intro.html#valores-lógicos",
    "title": "Introducción a R",
    "section": "Valores lógicos",
    "text": "Valores lógicos\n\nTRUE (T), FALSE (F)\n\n\nlogical_object &lt;- TRUE"
  },
  {
    "objectID": "ADR-1_Intro.html#factores",
    "href": "ADR-1_Intro.html#factores",
    "title": "Introducción a R",
    "section": "Factores",
    "text": "Factores\n\nCategorías (e.g., “Planta”, “Animal”, “Hongo”)\n\n\nfactor_object &lt;- factor(\"Plant\")"
  },
  {
    "objectID": "ADR-1_Intro.html#no-data",
    "href": "ADR-1_Intro.html#no-data",
    "title": "Introducción a R",
    "section": "No data",
    "text": "No data\n\nNA\n\n\nna_object &lt;- NA"
  },
  {
    "objectID": "ADR-1_Intro.html#qué-hace-interesantes-a-los-objetos",
    "href": "ADR-1_Intro.html#qué-hace-interesantes-a-los-objetos",
    "title": "Introducción a R",
    "section": "¿Qué hace interesantes a los objetos?",
    "text": "¿Qué hace interesantes a los objetos?\n\nEntidad con información\nSe puede reutilizar tantas veces como se quiera\nPertenece a una clase, lo que le dota de propiedades propias\nCada clase tiene una estructura propia"
  },
  {
    "objectID": "ADR-1_Intro.html#class-te-dice-la-clase-de-un-objeto",
    "href": "ADR-1_Intro.html#class-te-dice-la-clase-de-un-objeto",
    "title": "Introducción a R",
    "section": "class() te dice la clase de un objeto",
    "text": "class() te dice la clase de un objeto\n\nclass(numeric_object)\nclass(logical_object)\nclass(factor_object)\nclass(character_object)\nclass(\"x\")\nclass(x)"
  },
  {
    "objectID": "ADR-1_Intro.html#cómo-se-reutilizan-los-objetos",
    "href": "ADR-1_Intro.html#cómo-se-reutilizan-los-objetos",
    "title": "Introducción a R",
    "section": "¿Cómo se reutilizan los objetos?",
    "text": "¿Cómo se reutilizan los objetos?\n\na &lt;- a + 1\nb &lt;- a * a\nx &lt;- sqrt(b)\nx\n\n[1] 11"
  },
  {
    "objectID": "ADR-1_Intro.html#muchas-funciones-aceptan-varios-objetos",
    "href": "ADR-1_Intro.html#muchas-funciones-aceptan-varios-objetos",
    "title": "Introducción a R",
    "section": "Muchas funciones aceptan varios objetos",
    "text": "Muchas funciones aceptan varios objetos\n\n\n\n\n\n\n\n\n\n\nObjeto1\n\nObjeto1\n\n\n\nFunción\n\nFunción\n\n\n\nObjeto1-&gt;Función\n\n\n\n\n\nNuevo objeto\n\nNuevo objeto\n\n\n\nFunción-&gt;Nuevo objeto\n\n\n\n\n\nObjeto2\n\nObjeto2\n\n\n\nObjeto2-&gt;Función\n\n\n\n\n\nObjeto3\n\nObjeto3\n\n\n\nObjeto3-&gt;Función"
  },
  {
    "objectID": "ADR-1_Intro.html#se-pasan-varios-objetos-a-las-funciones-separados-por-comas",
    "href": "ADR-1_Intro.html#se-pasan-varios-objetos-a-las-funciones-separados-por-comas",
    "title": "Introducción a R",
    "section": "Se pasan varios objetos a las funciones separados por comas",
    "text": "Se pasan varios objetos a las funciones separados por comas\n\nsum(15, 16, 17, 24, 10)\n\n[1] 82"
  },
  {
    "objectID": "ADR-1_Intro.html#algunos-objetos-no-son-datos-si-no-opciones-que-modifican-el-comportamiento-de-las-funciones",
    "href": "ADR-1_Intro.html#algunos-objetos-no-son-datos-si-no-opciones-que-modifican-el-comportamiento-de-las-funciones",
    "title": "Introducción a R",
    "section": "Algunos objetos no son datos, si no opciones que modifican el comportamiento de las funciones",
    "text": "Algunos objetos no son datos, si no opciones que modifican el comportamiento de las funciones\n\n\n\n\n\n\n\n\n\n\nObjeto1\n\nObjeto1\n\n\n\nFunción\n\nFunción\n\n\n\nObjeto1-&gt;Función\n\n\n\n\n\nNuevo objeto\n\nNuevo objeto\n\n\n\nFunción-&gt;Nuevo objeto\n\n\n\n\n\nObjeto2\n\nObjeto2\n\n\n\nObjeto2-&gt;Función\n\n\n\n\n\nObjeto3\n\nObjeto3\n\n\n\nObjeto3-&gt;Función\n\n\n\n\n\nOpción\n\nOpción\n\n\n\nOpción-&gt;Función\n\n\n\n\n\n\n\n\n\n\n\nLas opciones en realidad también son objetos. El número de objetos que requiere una función se conocen como argumentos"
  },
  {
    "objectID": "ADR-1_Intro.html#las-opciones-también-se-separan-por-comas",
    "href": "ADR-1_Intro.html#las-opciones-también-se-separan-por-comas",
    "title": "Introducción a R",
    "section": "Las opciones también se separan por comas",
    "text": "Las opciones también se separan por comas\n\nseveral_data &lt;- c(15, 16, 17, 24, 10, NA)\nmean(several_data)\n\n[1] NA\n\nmean(several_data, na.rm = TRUE)\n\n[1] 16.4"
  },
  {
    "objectID": "ADR-1_Intro.html#cómo-se-cuales-son-los-argumentos-de-una-función",
    "href": "ADR-1_Intro.html#cómo-se-cuales-son-los-argumentos-de-una-función",
    "title": "Introducción a R",
    "section": "¿Cómo se cuales son los argumentos de una función?",
    "text": "¿Cómo se cuales son los argumentos de una función?\n\nMuchas funciones tendrán valores predeterminados para los argumentos\n\nSi no se especifica, el argumento tomará ese valor\n\nPara encontrar estos valores y una lista de todos los argumentos, puedes usar cualquiera de las siguientes opciones:\n\n?funcion\nhelp(funcion)\nUsar la pestaña Help de Rstudio\n\n\n\nhelp(mean)"
  },
  {
    "objectID": "ADR-1_Intro.html#los-objetos-pueden-tener-muchos-datos-organizados-en-dimensiones",
    "href": "ADR-1_Intro.html#los-objetos-pueden-tener-muchos-datos-organizados-en-dimensiones",
    "title": "Introducción a R",
    "section": "Los objetos pueden tener muchos datos organizados en dimensiones",
    "text": "Los objetos pueden tener muchos datos organizados en dimensiones"
  },
  {
    "objectID": "ADR-1_Intro.html#vectores-numéricos",
    "href": "ADR-1_Intro.html#vectores-numéricos",
    "title": "Introducción a R",
    "section": "Vectores numéricos",
    "text": "Vectores numéricos\nSe pueden crear secuencias de números de forma sencilla\n\na &lt;- 1:4\na\n\n[1] 1 2 3 4"
  },
  {
    "objectID": "ADR-1_Intro.html#vectores-numéricos-1",
    "href": "ADR-1_Intro.html#vectores-numéricos-1",
    "title": "Introducción a R",
    "section": "Vectores numéricos",
    "text": "Vectores numéricos\nSe pueden crear secuencias con la función seq()\n\na &lt;- seq(1, 10)\na\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n\n\n\n\n\n\n\nNote\n\n\nComo veremos más adelante. Esta función es muy flexible y permite crear secuencias más complejas."
  },
  {
    "objectID": "ADR-1_Intro.html#vectores-numéricos-2",
    "href": "ADR-1_Intro.html#vectores-numéricos-2",
    "title": "Introducción a R",
    "section": "Vectores numéricos",
    "text": "Vectores numéricos\nSe pueden crear secuencias de números no consecutivos con la función c()\n\na &lt;- c(4, 2, 5, 10)\na\n\n[1]  4  2  5 10"
  },
  {
    "objectID": "ADR-1_Intro.html#vectores-de-texto-y-factores",
    "href": "ADR-1_Intro.html#vectores-de-texto-y-factores",
    "title": "Introducción a R",
    "section": "Vectores de texto y factores",
    "text": "Vectores de texto y factores\n\nspecies &lt;- c(\"Bromus diandrus\", \"Bromus carinatu\", \"Bison biso\")\n\nkingdom &lt;- factor(c(\"Plant\", \"Plant\", \"Animal\"))"
  },
  {
    "objectID": "ADR-1_Intro.html#vectores-lógicos",
    "href": "ADR-1_Intro.html#vectores-lógicos",
    "title": "Introducción a R",
    "section": "Vectores lógicos",
    "text": "Vectores lógicos\nOperadores condicionales: &lt; &gt; &lt;= &gt;= == != %in%\n\n3 &lt; 5\n\n[1] TRUE\n\n3 &gt; 5\n\n[1] FALSE\n\nx &lt;- 5\nx == 5\n\n[1] TRUE\n\nx != 5\n\n[1] FALSE"
  },
  {
    "objectID": "ADR-1_Intro.html#vectores-lógicos-1",
    "href": "ADR-1_Intro.html#vectores-lógicos-1",
    "title": "Introducción a R",
    "section": "Vectores lógicos",
    "text": "Vectores lógicos\n\nx &lt;- 1:10\nx &lt; 5\n\n [1]  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE\n\nx == 2\n\n [1] FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\nspecies == (\"Bromus diandrus\")\n\n[1]  TRUE FALSE FALSE"
  },
  {
    "objectID": "ADR-1_Intro.html#extrayendo-valores-de-vectores",
    "href": "ADR-1_Intro.html#extrayendo-valores-de-vectores",
    "title": "Introducción a R",
    "section": "Extrayendo valores de vectores",
    "text": "Extrayendo valores de vectores\n\nR usa [ ] para referirse a elementos de objetos\n\nV[5] devuelve el 5º elemento de un vector llamado V\n\nEl número entre corchetes se denomina índice (i)\n\n\na &lt;- c(3,2,7,8)\n\na[3]\n# ????\n\na[1:3]\n# ????\n\na[seq(2, 4)]\n# ???"
  },
  {
    "objectID": "ADR-1_Intro.html#los-objetos-pueden-tener-muchos-datos-organizados-en-dimensiones-1",
    "href": "ADR-1_Intro.html#los-objetos-pueden-tener-muchos-datos-organizados-en-dimensiones-1",
    "title": "Introducción a R",
    "section": "Los objetos pueden tener muchos datos organizados en dimensiones",
    "text": "Los objetos pueden tener muchos datos organizados en dimensiones"
  },
  {
    "objectID": "ADR-1_Intro.html#matrices",
    "href": "ADR-1_Intro.html#matrices",
    "title": "Introducción a R",
    "section": "Matrices",
    "text": "Matrices\n\nA &lt;- matrix(data = 0, nrow = 6, ncol = 5)\nA\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    0    0    0    0    0\n[2,]    0    0    0    0    0\n[3,]    0    0    0    0    0\n[4,]    0    0    0    0    0\n[5,]    0    0    0    0    0\n[6,]    0    0    0    0    0"
  },
  {
    "objectID": "ADR-1_Intro.html#matrices-1",
    "href": "ADR-1_Intro.html#matrices-1",
    "title": "Introducción a R",
    "section": "Matrices",
    "text": "Matrices\n\nA &lt;- matrix(data = 1:30, nrow = 6, ncol = 5)\n# ????"
  },
  {
    "objectID": "ADR-1_Intro.html#extrayendo-valores-de-matrices",
    "href": "ADR-1_Intro.html#extrayendo-valores-de-matrices",
    "title": "Introducción a R",
    "section": "Extrayendo valores de matrices",
    "text": "Extrayendo valores de matrices\n\nR usa [ ] para referirse a elementos de objetos\nEl orden es siempre [filas, columnas]\n\nM[2,3] devuelve el elemento de la 2ª fila, 3ª columna de la matriz M\nM[2,] devuelve todos los elementos de la 2ª fila de la matriz M\n\nLos números entre corchetes se denominan índices (i y j)"
  },
  {
    "objectID": "ADR-1_Intro.html#extrayendo-valores-de-matrices-1",
    "href": "ADR-1_Intro.html#extrayendo-valores-de-matrices-1",
    "title": "Introducción a R",
    "section": "Extrayendo valores de matrices",
    "text": "Extrayendo valores de matrices\n\nA &lt;- matrix(data = 1:30, nrow = 6, ncol = 5)\n\nA[3, 4]\n\n[1] 21\n\n\n\nA[c(1:3), 4]\n\n[1] 19 20 21\n\n# ???"
  },
  {
    "objectID": "ADR-1_Intro.html#pueden-los-objetos-mezclar-tipos-de-datos",
    "href": "ADR-1_Intro.html#pueden-los-objetos-mezclar-tipos-de-datos",
    "title": "Introducción a R",
    "section": "¿Pueden los objetos mezclar tipos de datos?",
    "text": "¿Pueden los objetos mezclar tipos de datos?"
  },
  {
    "objectID": "ADR-1_Intro.html#data-frame",
    "href": "ADR-1_Intro.html#data-frame",
    "title": "Introducción a R",
    "section": "Data frame",
    "text": "Data frame\n\nUn data frame es una lista de vectores de la misma longitud\nSon equivalente a matrices con diferentes tipos de datos en cada columna\nSe usan para almacenar diferentes variables a partir de las mismas mediciones"
  },
  {
    "objectID": "ADR-1_Intro.html#data-frame-1",
    "href": "ADR-1_Intro.html#data-frame-1",
    "title": "Introducción a R",
    "section": "Data frame",
    "text": "Data frame\n\ndf &lt;- data.frame(\n    name = c(\"Diego\", \"Lucía\", \"Paco\"),\n    age = c(27, 23, 24)\n    )"
  },
  {
    "objectID": "ADR-1_Intro.html#extrayendo-información-de-un-data-frame",
    "href": "ADR-1_Intro.html#extrayendo-información-de-un-data-frame",
    "title": "Introducción a R",
    "section": "Extrayendo información de un data frame",
    "text": "Extrayendo información de un data frame\n\nExtracción de columnas\n\nData$columnname\nData[,”columnname”]\nData[,3]\n\nNombre de filas\n\nrownames(Data)\n\nNombre de columnas\n\ncolnames(Data)"
  },
  {
    "objectID": "ADR-1_Intro.html#archivos-objetos-y-proyectos",
    "href": "ADR-1_Intro.html#archivos-objetos-y-proyectos",
    "title": "Introducción a R",
    "section": "Archivos, objetos y proyectos",
    "text": "Archivos, objetos y proyectos\n\nLos tres son cosas diferentes en R…\n\n\n\n\nLos archivos son scripts (e.g., un archivo de texto) o archivos de datos (e.g., Excel) en el disco duro\nLos objetos son datos en la sesión de R. Sólo existen en la memoria temporal del ordenador\nUn proyecto es una carpeta con un montón de archivos y objetos de R\n\nEs recomendable usar una estructura de carpetas lógica\n\n\n\n\n\nCarpeta/\n\nDatos/\nFiguras/\nTablas/\nScript_1\nScript_2\nScript_3"
  },
  {
    "objectID": "ADR-1_Intro.html#entorno-sesión-o-environment-de-r",
    "href": "ADR-1_Intro.html#entorno-sesión-o-environment-de-r",
    "title": "Introducción a R",
    "section": "Entorno, sesión o environment de R",
    "text": "Entorno, sesión o environment de R\n\nEl espacio temporal en la memoria del equipo donde R guarda objetos mientras ejecuta un análisis\nEstá limitado en tamaño por la memoria RAM del ordenador"
  },
  {
    "objectID": "ADR-1_Intro.html#funciones-útiles-para-controlar-la-sesión-de-trabajo",
    "href": "ADR-1_Intro.html#funciones-útiles-para-controlar-la-sesión-de-trabajo",
    "title": "Introducción a R",
    "section": "Funciones útiles para controlar la sesión de trabajo",
    "text": "Funciones útiles para controlar la sesión de trabajo\n\nPara enumerar objetos en la sesión de R: ls()\nPara eliminar objetos de la sesión de R: rm()\nPara guardar la sesión de R: save.image()\nPara salir de la sesión de R: q()\n\n\nls()\nrm(numeric_object, character_object)\nsave.image()\nrm(list=ls())"
  },
  {
    "objectID": "ADR-1_Intro.html#directorio-de-trabajo-carpeta-del-proyecto",
    "href": "ADR-1_Intro.html#directorio-de-trabajo-carpeta-del-proyecto",
    "title": "Introducción a R",
    "section": "Directorio de trabajo (= carpeta del proyecto)",
    "text": "Directorio de trabajo (= carpeta del proyecto)\n\nEs el directorio donde R busca archivos o escribe archivos\nEn una sesión de R, las referencias a archivos se hacen desde el directorio de trabajo\n\nEs conveniente usar rutas relativas a los ficheros\n\n\ngetwd() obtener el directorio de trabajo\nsetwd() lo cambia"
  },
  {
    "objectID": "ADR-1_Intro.html#trabajar-con-datos",
    "href": "ADR-1_Intro.html#trabajar-con-datos",
    "title": "Introducción a R",
    "section": "Trabajar con datos",
    "text": "Trabajar con datos\n\nLectura de datos del disco duro\nR lo almacena como un objeto (guardado en la memoria de su computadora)\nTrata ese objeto como cualquier otro objeto\nLos cambios en el objeto están restringidos al objeto, no afectan a los datos del disco duro\n\n\nmyData &lt;- read.csv(\"some data.csv\")"
  },
  {
    "objectID": "ADR-1_Intro.html#escribir-un-archivo-de-datos",
    "href": "ADR-1_Intro.html#escribir-un-archivo-de-datos",
    "title": "Introducción a R",
    "section": "Escribir un archivo de datos",
    "text": "Escribir un archivo de datos\n\nwrite.csv(myData, \"updated data.csv\")"
  },
  {
    "objectID": "ADR-1_Intro.html#mucho-más-conveniente-usar-ficheros-excel",
    "href": "ADR-1_Intro.html#mucho-más-conveniente-usar-ficheros-excel",
    "title": "Introducción a R",
    "section": "¿Mucho más conveniente usar ficheros excel?",
    "text": "¿Mucho más conveniente usar ficheros excel?\n\ninstall.packages(\"openxlsx\")\nlibrary(openxlsx)\ndata &lt;- read.xlsx(\"data\", sheet = 1)"
  },
  {
    "objectID": "ADR-1_Intro.html#scripts",
    "href": "ADR-1_Intro.html#scripts",
    "title": "Introducción a R",
    "section": "Scripts",
    "text": "Scripts\n\nArchivos de texto\nCon llamadas a funciones (código)\nOrdenado y secuencial:\n\nCargar datos\nModificar datos\nAnálisis de datos\nGuardar/trazar resultados\n\nPuede/debe contener comentarios legibles por humanos\n\nUsar # antes del comentario\n\n\n\nNo se manejan desde la consola de R, si no desde la interfaz de Rstudio."
  },
  {
    "objectID": "ADR-1_Intro.html#seguimos-practicando",
    "href": "ADR-1_Intro.html#seguimos-practicando",
    "title": "Introducción a R",
    "section": "Seguimos practicando",
    "text": "Seguimos practicando\n\nEjercicios de clase\nParte 3"
  },
  {
    "objectID": "ADR-1_Intro.html#ejercicios-de-casa-homeworks",
    "href": "ADR-1_Intro.html#ejercicios-de-casa-homeworks",
    "title": "Introducción a R",
    "section": "Ejercicios de casa (Homeworks)",
    "text": "Ejercicios de casa (Homeworks)\n\nEn la web de la asignatura (enlace en Moodle)\nEntregar antes de la siguiente clase\n\n\n\n\n\nAnálisis de datos con R"
  },
  {
    "objectID": "ADR-1-Ejercicios.html",
    "href": "ADR-1-Ejercicios.html",
    "title": "Análisis espaciales y multivariantes con R (AEMeR) aplicados a estudios de biodiversidad",
    "section": "",
    "text": "Nota\n\n\n\nLos ejercicios tendréis que entregarlos para la evaluación del curso. Para ello, crea un script de R con RStudio. Ponle el nombre ejercicios_t1.R. Dicho script deberá estar organizado con comentarios en castellano (poniendo una almohadilla # delante) y justo detrás el código necesario para realizar el ejercicio (ver ejemplo debajo). Además, si el ejercicio pide reflexionar sobre el resultado use los comentarios (con la #) para indicar sus reflexiones debajo del código. Una vez los tengáis completos deberéis subirlos en la actividad correspondiente de Moodle.\n\n# Ejercicio 1.\n# Parte 1\nseq(1, 40, by = 2)\n\n# Parte 2\nseq(1, 40, by = -2)\n# Este código da error porque especifiqué algo mal :)\n\n\n\n\nParte 1: Trabajando con vectores\n1. Como muchas funciones en R, seq() es flexible y puede trabajar de formas muy diferentes. Merece la pena entender cómo y porqué funciona de la forma en la que lo hace. Prueba los siguientes comandos y explica debajo de cada uno de ellos cual es el resultado y porqué crees que devuelve dicho resultado:\n\nseq()\nseq(0, 5)\nseq(from = 0, to = 5)\nseq(to = 5)\nseq(to = 5, by = 0.5)\nseq(from = 10, to = 1, length.out = 10)\nseq(from = 5, to = 1, by = -2)\nseq(from = 5, to = 1, by = 2)\n\n2. Fijaros que se pueden pasar argumentos a una función en R ya sea por su nombre (por ejemplo, to = 5 o by = 0.1), o simplemente colocando los parámetros en el orden correcto. La función seq() espera que le des argumentos en el orden (from, to, by). Puedes averiguarlo revisando el archivo de ayuda ejecutando el código ?seq o help(). En caso de duda, es más seguro especificar argumentos por su nombre, en cuyo caso cualquier orden está bien. Puedes probar por ejemplo con los siguientes comandos:\n\nseq(4, 8, 1)\nseq(by = 1, to = 8, from = 4)\nseq(to = 8, by = 1, from = 4)\n\n\nContesta a la siguiente pregunta ¿Se interpretan y devuelven el mismo resultado todos estos comandos?\n\n3. Si se está interesado en generar una secuencia entera, a menudo es más rápido usar un operador (un símbolo reservado para una tarea especial). Aquí, podríamos generar la secuencia anterior usando el operador :.\n\n4:8\n\n\nOtros operadores comunes son +, -, *, /, ^, entre otros. Prueba todos ellos y explica debajo de cada línea que hace dicho operador.\n\n4. Usa seq() y c() para crear un vector llamado a que contenga los enteros del 1 al 10, seguido de los enteros pares del 20 al 30, seguidos de los múltiplos de 5 del 150 al 100 (cuenta regresiva). Contesta las siguientes preguntas: ¿Cuál es la longitud del vector a? ¿Cuál es el decimocuarto elemento del vector “a”?\n\n\n\n\n\n\nPista\n\n\n\n\n\nAquí deberás usar primero la función seq() para generar las secuencias que necesitas y luego encadenarlas con la función c(). Además, necesitarás hacer uso de los corchetes para extraer la información del vector en las posiciones que te interese. Recuerda que el valor que se especifica dentro del corchete es la posición, o posiciones, que se desea obtener.\n\n\n\n5. Ahora genera en una sola línea de código un vector con los valores de a en las posiciones 2º, 23º y 10º, en ese mismo orden.\n6. Crea cuatro vectores diferentes. El primero llamado “nombres” con los nombres de 15 personas ficticias. El segundo llamado “país” con el país de nacimiento de esas mismas 15 personas ficticias. Asegúrate que el vector país tiene los datos de forma categórica o factor. El tercero llamado “peso” con el peso en kilogramos de cada una de esas 15 personas. Finalmente, el cuarto vector llamado “altura” deberá tener la estatura en metros de cada uno de ellos. Tened en cuenta, que los 4 vectores se ordenarán de forma correlativa: El primer peso que especifiquéis en el vector “peso” corresponderá al peso de la persona cuyo nombre aparezca en primera posición en el vector “nombres”. Una vez que hayas creado los cuatro vectores, calcula el índice de masa corporal (IMC), usando la siguiente fórmula: IMC = peso / estatura^2. Con esta información crear un vector con los nombres de las personas que hayan obtenido un IMC superior a 25.\n\n\n\n\n\n\nPista\n\n\n\n\n\nAquí tendrás que combinar el uso de varias funciones. Por un lado los operadores condicionales (&lt;, &lt;=, &gt;, &gt;=, ==, !=…) permiten realizar una comprobación sobre todos los valores de un vector. El resultado es un vector de valores lógicos (TRUE o FALSE) dependiendo de si cada elemento cumple la condición, o no. Posteriormente, podrás usar la función which(), que al pasarle un vector de valores lógicos, nos dice que posiciones de dicho vector son TRUE. Esto nos permite generar un índice, al que solemos llamar i, con las posiciones de los valores que nos interesan. Una vez que tengas ese índice, sólo necesitas usarlo dentro de un corchete ([]) para extraer los valores de las posiciones de interés.\n\n\n\n7. Consulta la ayuda de la función data.frame() y explica que crees que hace la función, cuáles son los argumentos que acepta, en que orden debo especificarlos si no los nombro, y cuál es el valor por defecto de esos argumentos. Finalmente, genera un código de ejemplo donde uses la función correctamente.\n\n\n\n\n\n\nPista\n\n\n\n\n\nConsulta la página de ayuda por completo… hasta el final.\n\n\n\n\n\nParte 2: Trabajando con matrices y data.frames\n1. Crea una matriz llamada “A” que tenga 12 filas y 8 columnas, donde cada elemento en la matriz sea un número diferente generado aleatoriamente de una distribución normal con una media de 3 y una desviación estándar de 2. Establece una nueva variable “b” que sea igual al elemento en la quinta fila y la sexta columna de “A”.\n\nTen en cuenta que, una vez que se establece, b es independiente de A. Mantendrá su valor como esté definido, incluso si los elementos de A cambian posteriormente.\n\n\n\n\n\n\n\nPista\n\n\n\n\n\nAquí necesitas usar la función matrix(). Esta función admite una serie de valores, que usará para rellenar los datos de una matriz. Además, admite los argumentos nrow y ncol especificando las dimensiones de dicha matriz. Para generar los valores aleatorios con los que rellenar la matriz puedes usar la función rnorm() a la que le puedes pasar el número de valores que necesitas generar, además de los argumentos meany sd, que permiten especificar los valores de la media y desviación estandar, respectivamente, que van a tener el conjunto de datos generado.\n\n\n\n2. Crea un data frame llamado “datos” que contenga la información de los cuatro vectores (i.e., nombres, sexo, altura y peso) de los ejercicios anteriores. Vuelve a calcular el IMC, pero usando los datos almacenados dentro de este data frame e incorpora el resultado como una nueva columna dentro del propio data frame.\n\n\n\n\n\n\nPista\n\n\n\n\n\nAquí deberás usar la función data.frame(). Esta función acepta como argumentos vectores con un nombre. La forma de especificarlos es la siguiente: data.frame(nombre = vector). Puedes especificar tantos argumentos como necesites: data.frame(nombre1 = vector1, nombre2 = vector2, nombre3 = vector3). Recuerda que para extraer la información de las columnas de un data frame, puedes usar tanto corchetes ([]), como $.\n\n\n\n\n\nParte 3: Usando ficheros de datos\n1. Lee en R un fichero de datos de ejemplo (“Abundancia.csv”) que incluye información sobre la abundancia de varias especies en diferentes sitios y llama al data frame resultante “abundancia”. Usa head(), names() y str() para explorar la estructura del data frame “abundancia”. Contesta las siguientes preguntas ¿Cuáles son los nombres de las especies muestreadas? ¿Cuantos sitios se han muestreado?\n\n\n\n\n\n\nPista\n\n\n\n\n\nUsa la función read.csv(path), donde path indica la ubicación del archivo en el disco duro y este argumento se introduce como una cadena de texto (entre comillas). Ten en cuenta que los datos se leen en la memoria RAM del ordenador para que R trabaje con ellos. Los cambios que realices en los datos se almacenan solo en la memoria (NO alteran el archivo de datos original). Esta y otras funciones relacionadas (read.delim(), read.table() y otras) devuelven un data frame. A menudo es una buena idea usar la opción as.is = T, que impide la conversión de variables de tipo character en variables de tipo factor.\n\n\n\n2. Usa la función apply() para calcular la abundancia promedio de cada especie.\n\nTen en cuenta que ahora estamos trabajando con un data frame, por lo que no todas las columnas son numéricas. La columna con el nombre de especie no puede realizar operaciones numéricas, por lo que tendrás que excluir esa columna de alguna manera. Para ello puedes usar los corchetes [] de forma similar a como hacíamos para seleccionar elementos dentro de un vector o de una matriz.\n\n\n\n\n\n\n\nPista\n\n\n\n\n\nLa función apply(X, MARGIN, FUN) realiza alguna función (FUN) en cada fila o columna de una matriz o marco de datos (X). MARGIN permite especificar si se debe realizar la función en filas (MARGIN = 1) o en columnas (MARGIN = 2). FUN permite especificar la función a realizar (e.g. FUN = mean, FUN = sd o FUN = sum)\n\nAlgunas funciones útiles para usar aquí son max, min, mean, sum, entre otras. Explora con todas ellas e intenta averiguar que hace cada una.\n\n\n\n\n3. Usa la función apply() para calcular la abundancia promedio en cada sitio.\n4. Usa la función which() para determinar qué sitios tienen al menos 10 individuos de Lupinus bicolor. Usa la función which() para determinar qué especies tienen una abundancia de al menos 5 en el Site5.\n\n\n\n\n\n\nPista\n\n\n\n\n\nLa función which(x) devuelve los índices de los elementos de x que son TRUE. Nota que x debe ser un vector o matriz de tipo logic (i.e. todos los valores son TRUE o FALSE).\n\n\n\n5. Crea una nueva matriz llamada “presencia” donde cada elemento de “presencia” es 1, si el valor correspondiente de “abundancia” es mayor que 0, y 0 en el caso contrario.\n\n\n\n\n\n\nPista\n\n\n\n\n\nLa función ifelse(test, yes, no) comprueba una condición (test) y si se cumple devuelve el valor especificado en el argumento yes. Si la condición no se cumple, devuelve el valor especificado en el argumento no. Las condiciones se especifican con los operadores lógicos (v.gr. &gt;) de la siguiente manera: vector &gt; 25 lo que comparará cada valor del objeto vector y lo compara con 25, devolviendo TRUE o FALSE en cada caso dependiendo del resultado de la comparación. Por tanto, el resultado de la función es otro vector de la misma longitud pero de tipo lógico.\n\n\n\n6. Usando la matriz “presencia” que creaste y la función apply(), calcula la riqueza de especies (i.e. el número de especies) de cada sitio.\n7. Usando la matriz “presencia” que creaste y la función apply(), calcula la prevalencia de cada especie (i.e. el número de veces que ocurre con respecto al número total de sitios).\n8. Escribe la matriz “presencia” que creaste en un archivo “Presencia.xlsx”.\n\n\n\n\n\n\nPista\n\n\n\n\n\nLa función write.csv(x, file) te permitirá guardar el objeto x con el nombre especificado en file. Al tratarse de un nombre de fichero se especifica entre comillas file = \"fichero.csv\"."
  },
  {
    "objectID": "ADR-1-Homeworks.html",
    "href": "ADR-1-Homeworks.html",
    "title": "Análisis espaciales y multivariantes con R (AEMeR) aplicados a estudios de biodiversidad",
    "section": "",
    "text": "Nota\n\n\n\nLos ejercicios tendréis que entregarlos para la evaluación del curso. Para ello, crea un script de R con RStudio. Ponle el nombre homeworks_t1.R. Dicho script deberá estar organizado con comentarios en castellano (poniendo una almohadilla # delante) y justo detrás el código necesario para realizar el ejercicio (ver ejemplo debajo). Además, si el ejercicio pide reflexionar sobre el resultado use los comentarios (con la #) para indicar sus reflexiones debajo del código. Una vez los tengáis completos deberéis subirlos en la actividad correspondiente de Moodle.\n\n# Ejercicio 1.\n# Parte 1\nseq(1, 40, by = 2)\n\n# Parte 2\nseq(1, 40, by = -2)\n# Este código da error porque especifiqué algo mal :)"
  },
  {
    "objectID": "ADR-1-Homeworks.html#parte-1---cargando-data-frames",
    "href": "ADR-1-Homeworks.html#parte-1---cargando-data-frames",
    "title": "Análisis espaciales y multivariantes con R (AEMeR) aplicados a estudios de biodiversidad",
    "section": "Parte 1 - Cargando data frames",
    "text": "Parte 1 - Cargando data frames\n1. Genera de nuevo el data frame de presencias de especies que realizaste en la parte 3 de los ejercicios de clase (Presence.csv), y carga otro data frame complementario que contiene información sobre características de las especies (Traits.csv).\n2. ¿Cuál es la altura promedio de todas las especies que ocurren en el “Site3”?\n\n\n\n\n\n\nPista\n\n\n\n\n\nPara ello podrías usar la función which para determinar que especies ocurren en el “Site3” y luego calcular su altura promedio. Cuidado al calcular el promedio, ya que las especies que no están presentes no deben usarse en el cálculo del valor medio.\n\n\n\n3. ¿Qué sitio tiene el “SLA” promedio más alto?\n\n\n\n\n\n\nPista\n\n\n\n\n\nEn esta ocasión, os estoy pidiendo que calculéis el SLA promedio de todos los sitios. Para ello deberéis hacer algo parecido a lo del ejercicio 2, pero para todos los sitio y no solo para el “Site3”. Además, deberéis hacerlo para la variable SLA y no para la altura. De nuevo, tenéis que tener en cuenta cuales son las especies que aparecen en cada sitio y calcular la media del valor de SLA de todas ellas. Idealmente, generaréis un vector con el valor del SLA promedio de cada sitio. Posteriormente, deberéis averiguar cual de ellos tiene el valor más alto. Aquí la función max() será útil, ya que devuelve el elemento máximo en un vector o matriz.\n\n\n\n4. Realiza la misma consulta usando la función which.max()."
  },
  {
    "objectID": "ADR-1-Homeworks.html#parte-2---depuración",
    "href": "ADR-1-Homeworks.html#parte-2---depuración",
    "title": "Análisis espaciales y multivariantes con R (AEMeR) aplicados a estudios de biodiversidad",
    "section": "Parte 2 - Depuración",
    "text": "Parte 2 - Depuración\nEscribí un script que analiza los ficheros Test Presences.csv y Test Traits.csv para encontrar el sitio con la riqueza de especies más baja y calcula la masa foliar promedio de las especies en ese sitio. Mi script se llama “Lecture 1 Debugging.r”. Copia el código de ese script en tu script debajo de un nuevo comentario # Parte 2.\n1. El script tiene varios errores. ¡Arreglalos! Lee detenidamente el encabezado del script ya que tiene información vital para saber si estás arreglando bien el script y obteniendo el resultado deseado.\n\nGuarda la versión completa de tu script (con las partes 1 y 2) y súbelo a Moodle!\n\n\nEnvíame un correo electrónico o habla conmigo en cualquier momento antes de la siguiente clase si tienes problemas."
  },
  {
    "objectID": "ADR-2-Ejercicios.html",
    "href": "ADR-2-Ejercicios.html",
    "title": "Análisis espaciales y multivariantes con R (AEMeR) aplicados a estudios de biodiversidad",
    "section": "",
    "text": "Nota\n\n\n\nLos ejercicios tendréis que entregarlos para la evaluación del curso. Para ello, crea un script de R con RStudio. Ponle el nombre ejercicios_t2.R. Dicho script deberá estar organizado con comentarios en castellano (poniendo una almohadilla # delante) y justo detrás el código necesario para realizar el ejercicio (ver ejemplo debajo). Además, si el ejercicio pide reflexionar sobre el resultado use los comentarios (con la #) para indicar sus reflexiones debajo del código. Una vez los tengáis completos deberéis subirlos en la actividad correspondiente de Moodle.\n\n# Ejercicio 1.\n# Parte 1\nseq(1, 40, by = 2)\n\n# Parte 2\nseq(1, 40, by = -2)\n# Este código da error porque especifiqué algo mal :)\n\n\n\n\nParte 1: Gráficas y figuras\n1. Dibuja un histograma del vector “a” que creaste en los Ejercicios de la parte 1. Cambia el color de las barras con la opción col y cambia el color de los cuadros con la opción de border. Usa abline() para dibujar la media de la distribución como una línea vertical punteada.\n\nAquí deberás usar la función mean para calcular la media antes.\n\n\n\n\n\n\n\nPista\n\n\n\n\n\nLa función hist (x) dibuja un histograma de los valores almacenados en x. Se puede personalizar de varias maneras, incluido el uso de puntos de cambio para cambiar la definición de la anchura de las barras. Explora las posibilidades con ?hist\nLa función abline (a, b) dibuja una línea en la gráfica ya existente con la pendiente especificada b e intercepto a. También puede dibujar líneas horizontales o verticales. Para ello, en lugar de especificar los argumentos a y b, deberás especificar un valor concreto usando h = valor o v = valor, dependiendo si quieres dibujar una línea horizontal o vertical.\n\n\n\n2. Crea dos variables correlacionadas “x” e “y”, usando x &lt;- rnorm (200) e y = x + rnorm (200). Dibuja “x” vs. “y” y juega con los parámetros de trazado. Usa la abline para incluir una recta de regresión entre las dos variables.\n\n\n\n\n\n\nPista\n\n\n\n\n\nLa función plot (x, y,...) dibuja los datos de x contra los datos de y. Es personalizable utilizando una amplia gama de opciones. Puedes consultar todas las opciones con ?plot\nRecuerda, además, que la función abline (a, b) dibuja una línea en la gráfica ya existente con la pendiente especificada b e intercepto a. Para calcular los valores de la pendiente, puedes usar la función lm(x, y), que genera un modelo lineal entre las dos variables.\n\n\n\n3. Genera un nuevo conjunto de datos “w” correlacionado con “x”, usando w &lt;- 2*x * rnorm(200). Añade esta nuevo conjunto de datos al gráfico anterior pero cambiando el color para que se distingan bien los datos de “y” y “w”. Además, añade otra recta de regresión entre “w” y “x”.\n\n\n\n\n\n\nPista\n\n\n\n\n\nHay varias funciones (points(x, y), segments(x0, y0, x1, y1), arrows(x0, y0, x1, y1), polygons(x, y), que en lugar de generar gráficos nuevos, dibuja puntos, segmentos de línea, flechas o polígonos en el último gráfico que se haya generado."
  }
]